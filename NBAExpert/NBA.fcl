FUNCTION_BLOCK NBA

VAR_INPUT
	GS : REAL;
	MP : REAL;
	FG : REAL;
	FGA : REAL;
	FGp : REAL;
	threeP : REAL;
	threePA : REAL;
	threePp : REAL;
	twoP : REAL;
	twoPA : REAL;
	twoPp : REAL;
	eFGp : REAL;
	FT : REAL;
	FTA : REAL;
	FTp : REAL;
	ORB : REAL;
	DRB : REAL;
	TRB : REAL;
	AST : REAL;
	STL : REAL;
	BLK : REAL;
	TOV : REAL;
	PF : REAL;
	PTS : REAL;
END_VAR

VAR_OUTPUT
    defensive : REAL;
    shooting : REAL;
    rebounding : REAL;
    leading : REAL;
    breaking  : REAL;
END_VAR

/*
    FUZZIFY
*/

FUZZIFY GS
	TERM VL := (0.0, 1) (0.0, 1) (0.0, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.0, 1) (0.0, 0);
	TERM M := (0.0, 0) (0.0, 1) (1.0, 1) (4.0, 0);
	TERM H := (3.0, 0) (5.0, 1) (10.600000000000023, 1) (19.0, 0);
	TERM VH := (6.0, 0) (12.0, 1) (19.0, 1);
END_FUZZIFY


FUZZIFY MP
	TERM VL := (0.0, 1) (2.96, 1) (4.600000000000001, 0);
	TERM L := (0.0, 0) (3.8, 1) (10.260000000000003, 1) (13.540000000000001, 0);
	TERM M := (11.76, 0) (15.500000000000002, 1) (21.580000000000002, 1) (26.680000000000003, 0);
	TERM H := (24.46, 0) (29.02, 1) (35.7, 1) (44.0, 0);
	TERM VH := (33.78000000000001, 0) (37.24, 1) (44.0, 1);
END_FUZZIFY


FUZZIFY FG
	TERM VL := (0.0, 1) (0.3, 1) (0.7, 0);
	TERM L := (0.0, 0) (0.4400000000000006, 1) (1.2, 1) (1.6, 0);
	TERM M := (1.4, 0) (2.0, 1) (2.780000000000001, 1) (3.5, 0);
	TERM H := (3.0600000000000023, 0) (4.0, 1) (6.2600000000000025, 1) (12.2, 0);
	TERM VH := (5.1800000000000015, 0) (7.44, 1) (12.2, 1);
END_FUZZIFY


FUZZIFY FGA
	TERM VL := (0.0, 1) (0.9, 1) (1.7, 0);
	TERM L := (0.0, 0) (1.1, 1) (2.7, 1) (3.4, 0);
	TERM M := (3.0, 0) (4.0200000000000005, 1) (5.780000000000001, 1) (7.680000000000001, 0);
	TERM H := (6.920000000000004, 0) (9.0, 1) (13.3, 1) (23.8, 0);
	TERM VH := (12.0, 0) (15.8, 1) (23.8, 1);
END_FUZZIFY


FUZZIFY FGp
	TERM VL := (0.0, 1) (0.25, 1) (0.333, 0);
	TERM L := (0.0, 0) (0.3, 1) (0.394, 1) (0.4114, 0);
	TERM M := (0.4, 0) (0.4266, 1) (0.45760000000000006, 1) (0.484, 0);
	TERM H := (0.4766, 0) (0.49599999999999994, 1) (0.5664, 1) (1.0, 0);
	TERM VH := (0.5418000000000002, 0) (0.6376000000000001, 1) (1.0, 1);
END_FUZZIFY


FUZZIFY threeP
	TERM VL := (0.0, 1) (0.0, 1) (0.0, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.1, 1) (0.3, 0);
	TERM M := (0.25999999999999945, 0) (0.5, 1) (0.8, 1) (1.2, 0);
	TERM H := (1.0, 0) (1.4, 1) (2.1, 1) (3.9, 0);
	TERM VH := (1.8, 0) (2.3, 1) (3.9, 1);
END_FUZZIFY


FUZZIFY threePA
	TERM VL := (0.0, 1) (0.0, 1) (0.3, 0);
	TERM L := (0.0, 0) (0.1, 1) (0.7, 1) (1.1, 0);
	TERM M := (0.9599999999999994, 0) (1.5200000000000002, 1) (2.6, 1) (3.6, 0);
	TERM H := (3.0, 0) (4.019999999999999, 1) (5.560000000000002, 1) (10.1, 0);
	TERM VH := (5.0, 0) (6.340000000000001, 1) (10.1, 1);
END_FUZZIFY


FUZZIFY threePp
	TERM VL := (0.0, 1) (0.0, 1) (0.0, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.17900000000000016, 1) (0.2568000000000001, 0);
	TERM M := (0.22119999999999998, 0) (0.3, 1) (0.333, 1) (0.3724, 0);
	TERM H := (0.346, 0) (0.38139999999999996, 1) (0.429, 1) (1.0, 0);
	TERM VH := (0.4, 0) (0.5, 1) (1.0, 1);
END_FUZZIFY


FUZZIFY twoP
	TERM VL := (0.0, 1) (0.060000000000000143, 1) (0.4, 0);
	TERM L := (0.0, 0) (0.2, 1) (0.680000000000001, 1) (1.0, 0);
	TERM M := (0.8, 0) (1.2, 1) (1.6, 1) (2.2, 0);
	TERM H := (1.8, 0) (2.8, 1) (4.6200000000000045, 1) (11.2, 0);
	TERM VH := (3.6600000000000024, 0) (5.2, 1) (11.2, 1);
END_FUZZIFY


FUZZIFY twoPA
	TERM VL := (0.0, 1) (0.3, 1) (0.8, 0);
	TERM L := (0.0, 0) (0.5, 1) (1.3, 1) (2.0, 0);
	TERM M := (1.7, 0) (2.2, 1) (2.9800000000000013, 1) (4.44, 0);
	TERM H := (3.2, 0) (5.0, 1) (8.160000000000002, 1) (20.3, 0);
	TERM VH := (6.8, 0) (9.74, 1) (20.3, 1);
END_FUZZIFY


FUZZIFY twoPp
	TERM VL := (0.0, 1) (0.10020000000000025, 1) (0.39120000000000005, 0);
	TERM L := (0.0, 0) (0.3398000000000001, 1) (0.43760000000000004, 1) (0.4822, 0);
	TERM M := (0.4646, 0) (0.5, 1) (0.519, 1) (0.5608000000000001, 0);
	TERM H := (0.5376000000000001, 0) (0.5835999999999999, 1) (0.667, 1) (1.0, 0);
	TERM VH := (0.6438, 0) (0.714, 1) (1.0, 1);
END_FUZZIFY


FUZZIFY eFGp
	TERM VL := (0.0, 1) (0.2800000000000001, 1) (0.4122, 0);
	TERM L := (0.0, 0) (0.3654, 1) (0.45780000000000004, 1) (0.4988, 0);
	TERM M := (0.47979999999999995, 0) (0.5006, 1) (0.5338, 1) (0.5594, 0);
	TERM H := (0.5468000000000001, 0) (0.576, 1) (0.6402000000000002, 1) (1.5, 0);
	TERM VH := (0.6138, 0) (0.6682, 1) (1.5, 1);
END_FUZZIFY


FUZZIFY FT
	TERM VL := (0.0, 1) (0.0, 1) (0.1, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.3, 1) (0.5, 0);
	TERM M := (0.4, 0) (0.7, 1) (0.9, 1) (1.4, 0);
	TERM H := (1.2, 0) (1.6, 1) (3.0600000000000023, 1) (8.5, 0);
	TERM VH := (2.360000000000002, 0) (4.0, 1) (8.5, 1);
END_FUZZIFY


FUZZIFY FTA
	TERM VL := (0.0, 1) (0.0, 1) (0.2, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.4, 1) (0.7, 0);
	TERM M := (0.6, 0) (0.8200000000000003, 1) (1.3, 1) (1.8, 0);
	TERM H := (1.5, 0) (2.0, 1) (3.9200000000000044, 1) (11.2, 0);
	TERM VH := (2.9800000000000013, 0) (5.3, 1) (11.2, 1);
END_FUZZIFY


FUZZIFY FTp
	TERM VL := (0.0, 1) (0.0, 1) (0.1956000000000002, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.6, 1) (0.682, 0);
	TERM M := (0.6593999999999999, 0) (0.723, 1) (0.773, 1) (0.8161999999999999, 0);
	TERM H := (0.8, 0) (0.833, 1) (0.933, 1) (1.0, 0);
	TERM VH := (0.889, 0) (1.0, 1) (1.0, 1);
END_FUZZIFY


FUZZIFY ORB
	TERM VL := (0.0, 1) (0.0, 1) (0.1, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.3, 1) (0.4, 0);
	TERM M := (0.3, 0) (0.4, 1) (0.5800000000000011, 1) (0.8, 0);
	TERM H := (0.7, 0) (0.9, 1) (1.5600000000000023, 1) (5.5, 0);
	TERM VH := (1.3, 0) (2.0, 1) (5.5, 1);
END_FUZZIFY


FUZZIFY DRB
	TERM VL := (0.0, 1) (0.3, 1) (0.8, 0);
	TERM L := (0.0, 0) (0.6, 1) (1.2, 1) (1.7, 0);
	TERM M := (1.4, 0) (1.9200000000000002, 1) (2.4, 1) (3.2, 0);
	TERM H := (2.8, 0) (3.4199999999999986, 1) (4.560000000000002, 1) (12.0, 0);
	TERM VH := (3.960000000000002, 0) (5.3, 1) (12.0, 1);
END_FUZZIFY


FUZZIFY TRB
	TERM VL := (0.0, 1) (0.5, 1) (1.0, 0);
	TERM L := (0.0, 0) (0.8, 1) (1.5800000000000012, 1) (2.1400000000000006, 0);
	TERM M := (1.8, 0) (2.5, 1) (3.1, 1) (4.0, 0);
	TERM H := (3.4, 0) (4.3, 1) (5.8, 1) (14.3, 0);
	TERM VH := (5.4, 0) (7.020000000000002, 1) (14.3, 1);
END_FUZZIFY


FUZZIFY AST
	TERM VL := (0.0, 1) (0.0, 1) (0.3, 0);
	TERM L := (0.0, 0) (0.2, 1) (0.5, 1) (0.7, 0);
	TERM M := (0.6, 0) (0.8, 1) (1.3, 1) (1.8, 0);
	TERM H := (1.5, 0) (2.1199999999999988, 1) (4.140000000000009, 1) (9.8, 0);
	TERM VH := (3.0, 0) (5.000000000000003, 1) (9.8, 1);
END_FUZZIFY


FUZZIFY STL
	TERM VL := (0.0, 1) (0.0, 1) (0.1, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.2, 1) (0.3, 0);
	TERM M := (0.3, 0) (0.4, 1) (0.6, 1) (0.8, 0);
	TERM H := (0.7, 0) (0.8, 1) (1.1600000000000024, 1) (2.1, 0);
	TERM VH := (1.0, 0) (1.2, 1) (2.1, 1);
END_FUZZIFY


FUZZIFY BLK
	TERM VL := (0.0, 1) (0.0, 1) (0.0, 0);
	TERM L := (0.0, 0) (0.0, 1) (0.0, 1) (0.2, 0);
	TERM M := (0.1, 0) (0.2, 1) (0.3, 1) (0.3400000000000006, 0);
	TERM H := (0.3, 0) (0.4, 1) (0.8, 1) (2.5, 0);
	TERM VH := (0.7, 0) (1.0, 1) (2.5, 1);
END_FUZZIFY


FUZZIFY TOV
	TERM VL := (0.0, 1) (0.0, 1) (0.2, 0);
	TERM L := (0.0, 0) (0.04000000000000057, 1) (0.4, 1) (0.6, 0);
	TERM M := (0.5, 0) (0.7, 1) (0.8800000000000011, 1) (1.1, 0);
	TERM H := (1.0, 0) (1.3, 1) (2.0600000000000023, 1) (6.2, 0);
	TERM VH := (1.680000000000001, 0) (2.5, 1) (6.2, 1);
END_FUZZIFY


FUZZIFY PF
	TERM VL := (0.0, 1) (0.1, 1) (0.5200000000000002, 0);
	TERM L := (0.0, 0) (0.3, 1) (1.0, 1) (1.4, 0);
	TERM M := (1.2, 0) (1.6, 1) (2.0, 1) (2.4, 0);
	TERM H := (2.2600000000000025, 0) (2.6, 1) (3.0, 1) (4.7, 0);
	TERM VH := (2.9, 0) (3.2, 1) (4.7, 1);
END_FUZZIFY


FUZZIFY PTS
	TERM VL := (0.0, 1) (0.7, 1) (1.8200000000000003, 0);
	TERM L := (0.0, 0) (1.2, 1) (3.1800000000000015, 1) (4.24, 0);
	TERM M := (3.8, 0) (5.2, 1) (7.8, 1) (9.840000000000003, 0);
	TERM H := (8.760000000000002, 0) (10.82, 1) (17.420000000000005, 1) (31.7, 0);
	TERM VH := (14.5, 0) (20.020000000000007, 1) (31.7, 1);
END_FUZZIFY

/*
    DEFUZZIFY
*/

DEFUZZIFY defensive
    TERM VB := (0, 1) (0.2, 1) (0.35, 0);
    TERM B := (0.15, 0) (0.3, 1) (0.45, 0);
    TERM M := (0.3, 0) (0.5, 1) (0.7, 0);
    TERM G := (0.55, 0) (0.7, 1) (0.85, 0);
    TERM VG := (0.65, 0) (0.8, 1) (1,1);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY shooting
    TERM VB := (0, 1) (0.2, 1) (0.35, 0);
    TERM B := (0.15, 0) (0.3, 1) (0.45, 0);
    TERM M := (0.3, 0) (0.5, 1) (0.7, 0);
    TERM G := (0.55, 0) (0.7, 1) (0.85, 0);
    TERM VG := (0.65, 0) (0.8, 1) (1,1);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY rebounding
    TERM VB := (0, 1) (0.2, 1) (0.35, 0);
    TERM B := (0.15, 0) (0.3, 1) (0.45, 0);
    TERM M := (0.3, 0) (0.5, 1) (0.7, 0);
    TERM G := (0.55, 0) (0.7, 1) (0.85, 0);
    TERM VG := (0.65, 0) (0.8, 1) (1,1);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY leading
    TERM VB := (0, 1) (0.2, 1) (0.35, 0);
    TERM B := (0.15, 0) (0.3, 1) (0.45, 0);
    TERM M := (0.3, 0) (0.5, 1) (0.7, 0);
    TERM G := (0.55, 0) (0.7, 1) (0.85, 0);
    TERM VG := (0.65, 0) (0.8, 1) (1,1);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY breaking
    TERM VB := (0, 1) (0.2, 1) (0.35, 0);
    TERM B := (0.15, 0) (0.3, 1) (0.45, 0);
    TERM M := (0.3, 0) (0.5, 1) (0.7, 0);
    TERM G := (0.55, 0) (0.7, 1) (0.85, 0);
    TERM VG := (0.65, 0) (0.8, 1) (1,1);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

/*
    RULE
*/

RULEBLOCK defensive
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method


    RULE 1 : IF DRB IS VL THEN defensive IS VB;
    RULE 2 : IF DRB IS L THEN defensive IS B;
    RULE 3 : IF DRB IS M THEN defensive IS M;
	RULE 4 : IF DRB IS H THEN defensive IS G;
    RULE 5 : IF DRB IS VH THEN defensive IS VG;
    
    RULE 6 : IF DRB IS VL THEN defensive IS VB;
    RULE 7 : IF DRB IS L THEN defensive IS VB;
    RULE 8 : IF DRB IS M THEN defensive IS M;
    RULE 9 : IF DRB IS H THEN defensive IS G;
    RULE 10 : IF TRB IS VH THEN defensive IS G;

    RULE 11 : IF STL IS H THEN defensive IS VG;
    RULE 12 : IF STL IS VH THEN defensive IS VG;

    RULE 13 : IF BLK IS VL THEN defensive IS VB;
    RULE 14 : IF BLK IS L THEN defensive IS B;
    RULE 15 : IF BLK IS M THEN defensive IS M;
    RULE 16 : IF BLK IS H THEN defensive IS VG;
    RULE 17 : IF BLK IS VH THEN defensive IS VG;

END_RULEBLOCK

RULEBLOCK shooting
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method

	RULE 1 : IF FGp IS VL THEN shooting IS VB;
    RULE 2 : IF FGp IS L THEN shooting IS B;
    RULE 3 : IF FGp IS M THEN shooting IS M;
    RULE 4 : IF FGp IS H THEN shooting IS G;
    RULE 5 : IF FGp IS VH THEN shooting IS VG;

    RULE 6 : IF twoPp IS VL AND threePp IS VL THEN shooting IS VB;
    RULE 7 : IF twoPp IS L AND threePp IS L THEN shooting IS B;
    RULE 8 : IF twoPp IS M AND threePp IS L THEN shooting IS M;
    RULE 9 : IF twoPp IS L AND threePp IS M THEN shooting IS M;
    RULE 10 : IF twoPp IS M AND threePp IS M THEN shooting IS G;
    RULE 11 : IF twoPp IS H OR threePp IS H THEN shooting IS VG;
    RULE 12 : IF twoPp IS VH OR threePp IS VH THEN shooting IS VG;

    RULE 13 : IF FTp IS VL AND threePp IS VL THEN shooting IS VB;
    RULE 14 : IF FTp IS L AND threePp IS L THEN shooting IS B;

END_RULEBLOCK

RULEBLOCK rebounding
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method

	RULE 1 : IF TRB IS VL THEN rebounding IS VB;
    RULE 2 : IF TRB IS L THEN rebounding IS B;
    RULE 3 : IF TRB IS M THEN rebounding IS M;
    RULE 4 : IF TRB IS H THEN rebounding IS G;
    RULE 5 : IF TRB IS VH THEN rebounding IS VG;

    RULE 6 : IF ORB IS VL AND DRB IS VL THEN rebounding IS VB;
    RULE 7 : IF ORB IS L AND DRB IS L THEN rebounding IS B;
    RULE 8 : IF ORB IS M AND DRB IS L THEN rebounding IS M;
    RULE 9 : IF ORB IS L AND DRB IS M THEN rebounding IS M;
    RULE 10 : IF ORB IS M AND DRB IS M THEN rebounding IS M;
    RULE 11 : IF ORB IS H OR DRB IS H THEN rebounding IS G;
    RULE 12 : IF ORB IS VH OR DRB IS VH THEN rebounding IS VG;

END_RULEBLOCK

RULEBLOCK leading
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method

	RULE 1 : IF AST IS VL THEN leading IS VB;
    RULE 2 : IF AST IS L THEN leading IS B;
    RULE 3 : IF AST IS M THEN leading IS M;
    RULE 4 : IF AST IS H THEN leading IS G;
    RULE 5 : IF AST IS VH THEN leading IS VG;

    RULE 6 : IF TOV IS VL THEN leading IS VG;
    RULE 7 : IF TOV IS L THEN leading IS G;
    RULE 8 : IF TOV IS M THEN leading IS M;
    RULE 9 : IF TOV IS H THEN leading IS B;
    RULE 10 : IF TOV IS VH THEN leading IS VB;

    RULE 11 : IF STL IS VH OR STL IS H THEN leading IS G;
    RULE 12 : IF ORB IS VH OR ORB IS H THEN leading IS G;
    RULE 13 : IF DRB IS VH THEN leading IS G;

END_RULEBLOCK

RULEBLOCK breaking
	AND : MIN;	// Use 'min' for 'and'
	ACT : MIN;	// Use 'min' activation method
	ACCU : MAX;	// Use 'max' accumulation method

    RULE 2 : IF FTA IS VL THEN breaking IS VB;
    RULE 3 : IF FTA IS L THEN breaking IS B;
    RULE 4 : IF FTA IS M THEN breaking IS M;
    RULE 5 : IF FTA IS H THEN breaking IS G;
    RULE 1 : IF FTA IS VH THEN breaking IS VG;

    RULE 2 : IF STL IS VH or STL IS H THEN breaking IS G;

    RULE 3 : IF AST IS VH THEN breaking IS VG;
    RULE 4 : IF AST IS H THEN breaking IS G;

    RULE 6 : IF TOV IS VL THEN leading IS G;
    RULE 7 : IF TOV IS L THEN leading IS G;
    RULE 8 : IF TOV IS M THEN leading IS M;
    RULE 9 : IF TOV IS H THEN leading IS B;
    RULE 10 : IF TOV IS VH THEN leading IS VB;

END_RULEBLOCK

END_FUNCTION_BLOCK
